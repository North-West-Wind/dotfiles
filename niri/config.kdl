// This config is in the KDL format: https://kdl.dev
// "/-" comments out the following node.
// Check the wiki for a full description of the configuration:
// https://yalter.github.io/niri/Configuration:-Introduction

// Environment variables
environment {
    // For Electron
    ELECTRON_OZONE_PLATFORM_HINT "wayland"
    // KDE theme
    QT_QPA_PLATFORMTHEME "kde"
    // Wayland for everything
    SDL_VIDEODRIVER "wayland"
    CLUTTER_BACKEND "wayland"
    // Fcitx 5
    XMODIFIERS "@im=fcitx"
    QT_IM_MODULE "fcitx"
    SDL_IM_MODULE "fcitx"
    // Kitty Fcitx 5
    GLFW_IM_MODULE "ibus"
    // Dolphin Fix
    XDG_MENU_PREFIX "arch-"
    GTK_USE_PORTAL "1"
}

cursor {
    xcursor-theme "squid_cursors"
    xcursor-size 24
}

// Input device configuration.
// Find the full list of options on the wiki:
// https://yalter.github.io/niri/Configuration:-Input
input {
    keyboard {
        xkb {
            // You can set rules, model, layout, variant and options.
            // For more information, see xkeyboard-config(7).

            // For example:
            // layout "us,ru"
            // options "grp:win_space_toggle,compose:ralt,ctrl:nocaps"

            // If this section is empty, niri will fetch xkb settings
            // from org.freedesktop.locale1. You can control these using
            // localectl set-x11-keymap.
        }

        // Enable numlock on startup, omitting this setting disables it.
        numlock
    }

    // Next sections include libinput settings.
    // Omitting settings disables them, or leaves them at their default values.
    // All commented-out settings here are examples, not defaults.
    touchpad {
        // off
        tap
        // dwt
        // dwtp
        // drag false
        // drag-lock
        // natural-scroll
        // scroll-factor 0.6
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "two-finger"
        // disabled-on-external-mouse
    }

    mouse {
        // off
        // natural-scroll
        accel-speed -0.4
        // accel-profile "flat"
        // scroll-method "no-scroll"
    }

    trackpoint {
        // off
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "on-button-down"
        // scroll-button 273
        // scroll-button-lock
        // middle-emulation
    }

    // Uncomment this to make the mouse warp to the center of newly focused windows.
    // warp-mouse-to-focus

    // Focus windows and outputs automatically when moving the mouse into them.
    // Setting max-scroll-amount="0%" makes it work only on windows already fully on screen.
    focus-follows-mouse max-scroll-amount="0%"
}

// You can configure outputs by their name, which you can find
// by running `niri msg outputs` while inside a niri instance.
// The built-in laptop monitor is usually called "eDP-1".
// Find more information on the wiki:
// https://yalter.github.io/niri/Configuration:-Outputs
// Remember to uncomment the node by removing "/-"!
output "HDMI-A-2" {
    // Uncomment this line to disable this output.
    // off

    // Resolution and, optionally, refresh rate of the output.
    // The format is "<width>x<height>" or "<width>x<height>@<refresh rate>".
    // If the refresh rate is omitted, niri will pick the highest refresh rate
    // for the resolution.
    // If the mode is omitted altogether or is invalid, niri will pick one automatically.
    // Run `niri msg outputs` while inside a niri instance to list all outputs and their modes.
    mode "1920x1080@119.982"

    // You can use integer or fractional scale, for example use 1.5 for 150% scale.
    scale 1

    // Transform allows to rotate the output counter-clockwise, valid values are:
    // normal, 90, 180, 270, flipped, flipped-90, flipped-180 and flipped-270.
    transform "normal"

    // Position of the output in the global coordinate space.
    // This affects directional monitor actions like "focus-monitor-left", and cursor movement.
    // The cursor can only move between directly adjacent outputs.
    // Output scale and rotation has to be taken into account for positioning:
    // outputs are sized in logical, or scaled, pixels.
    // For example, a 3840×2160 output with scale 2.0 will have a logical size of 1920×1080,
    // so to put another output directly adjacent to it on the right, set its x to 1920.
    // If the position is unset or results in an overlap, the output is instead placed
    // automatically.
    position x=1920 y=1080

		focus-at-startup
}

output "HDMI-A-1" {
    mode "1920x1080@75.002"
    scale 1
    transform "normal"
    position x=0 y=0
}

// Settings that influence how windows are positioned and sized.
// Find more information on the wiki:
// https://yalter.github.io/niri/Configuration:-Layout
layout {
    // Set gaps around windows in logical pixels.
    gaps 16

    // When to center a column when changing focus, options are:
    // - "never", default behavior, focusing an off-screen column will keep at the left
    //   or right edge of the screen.
    // - "always", the focused column will always be centered.
    // - "on-overflow", focusing a column will center it if it doesn't fit
    //   together with the previously focused column.
    center-focused-column "never"

    // You can customize the widths that "switch-preset-column-width" (Mod+R) toggles between.
    preset-column-widths {
        // Proportion sets the width as a fraction of the output width, taking gaps into account.
        // For example, you can perfectly fit four windows sized "proportion 0.25" on an output.
        // The default preset widths are 1/3, 1/2 and 2/3 of the output.
        proportion 0.33333
        proportion 0.5
        proportion 0.66667

        // Fixed sets the width in logical pixels exactly.
        // fixed 1920
    }

    // You can also customize the heights that "switch-preset-window-height" (Mod+Shift+R) toggles between.
    // preset-window-heights { }

    // You can change the default width of the new windows.
    default-column-width { proportion 0.5; }
    // If you leave the brackets empty, the windows themselves will decide their initial width.
    // default-column-width {}

    // By default focus ring and border are rendered as a solid background rectangle
    // behind windows. That is, they will show up through semitransparent windows.
    // This is because windows using client-side decorations can have an arbitrary shape.
    //
    // If you don't like that, you should uncomment `prefer-no-csd` below.
    // Niri will draw focus ring and border *around* windows that agree to omit their
    // client-side decorations.
    //
    // Alternatively, you can override it with a window rule called
    // `draw-border-with-background`.

    // You can change how the focus ring looks.
    focus-ring {
        // Uncomment this line to disable the focus ring.
        off

        // How many logical pixels the ring extends out from the windows.
        width 4

        // Colors can be set in a variety of ways:
        // - CSS named colors: "red"
        // - RGB hex: "#rgb", "#rgba", "#rrggbb", "#rrggbbaa"
        // - CSS-like notation: "rgb(255, 127, 0)", rgba(), hsl() and a few others.

        // Color of the ring on the active monitor.
        active-color "#7fc8ff"

        // Color of the ring on inactive monitors.
        //
        // The focus ring only draws around the active window, so the only place
        // where you can see its inactive-color is on other monitors.
        inactive-color "#505050"

        // You can also use gradients. They take precedence over solid colors.
        // Gradients are rendered the same as CSS linear-gradient(angle, from, to).
        // The angle is the same as in linear-gradient, and is optional,
        // defaulting to 180 (top-to-bottom gradient).
        // You can use any CSS linear-gradient tool on the web to set these up.
        // Changing the color space is also supported, check the wiki for more info.
        //
        // active-gradient from="#80c8ff" to="#c7ff7f" angle=45

        // You can also color the gradient relative to the entire view
        // of the workspace, rather than relative to just the window itself.
        // To do that, set relative-to="workspace-view".
        //
        // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }

    // You can also add a border. It's similar to the focus ring, but always visible.
    border {
        // The settings are the same as for the focus ring.
        // If you enable the border, you probably want to disable the focus ring.
        // off

        width 2
        //active-color "#ffc87f"
        inactive-color "#595959aa"

        // Color of the border around windows that request your attention.
        urgent-color "#9b0000"

        // Gradients can use a few different interpolation color spaces.
        // For example, this is a pastel rainbow gradient via in="oklch longer hue".
        //
        active-gradient from="#00ffe1ee" to="#fff200ee" angle=315 relative-to="workspace-view" // in="oklch longer hue"

        // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }

    // You can enable drop shadows for windows.
    shadow {
        // Uncomment the next line to enable shadows.
        on

        // By default, the shadow draws only around its window, and not behind it.
        // Uncomment this setting to make the shadow draw behind its window.
        //
        // Note that niri has no way of knowing about the CSD window corner
        // radius. It has to assume that windows have square corners, leading to
        // shadow artifacts inside the CSD rounded corners. This setting fixes
        // those artifacts.
        //
        // However, instead you may want to set prefer-no-csd and/or
        // geometry-corner-radius. Then, niri will know the corner radius and
        // draw the shadow correctly, without having to draw it behind the
        // window. These will also remove client-side shadows if the window
        // draws any.
        //
        // draw-behind-window true

        // You can change how shadows look. The values below are in logical
        // pixels and match the CSS box-shadow properties.

        // Softness controls the shadow blur radius.
        softness 10

        // Spread expands the shadow.
        spread 2

        // Offset moves the shadow relative to the window.
        offset x=0 y=0

        // You can also change the shadow color and opacity.
        color "#1a1a1a77"
    }

    // Struts shrink the area occupied by windows, similarly to layer-shell panels.
    // You can think of them as a kind of outer gaps. They are set in logical pixels.
    // Left and right struts will cause the next window to the side to always be visible.
    // Top and bottom struts will simply add outer gaps in addition to the area occupied by
    // layer-shell panels and regular gaps.
    struts {
        // left 64
        // right 64
        // top 64
        // bottom 64
    }
}

gestures {
		hot-corners {
				off
		}
}

// Add lines like this to spawn processes at startup.
// Note that running niri as a session supports xdg-desktop-autostart,
// which may be more convenient to use.
// See the binds section below for more spawn examples.

// This line starts waybar, a commonly used bar for Wayland compositors.
spawn-at-startup "waybar"
// Notifications
spawn-at-startup "mako"
// Background
spawn-at-startup "swww-daemon"
spawn-at-startup "~/.config/niri/bg/swww.sh"
// Idler
spawn-at-startup "hypridle" "-c" "~/.config/niri/hypridle.conf"
// Clipboard
spawn-at-startup "wl-paste" "--watch" "cliphist" "store"
// Tray items
spawn-at-startup "blueman-applet"
spawn-at-startup "nm-applet" "--indicator"
spawn-at-startup "fcitx5"
// polkit
spawn-at-startup "/usr/lib/polkit-kde-authentication-agent-1"
// Take a break!
spawn-at-startup "~/.config/waybar/scripts/break/start.sh"

// To run a shell command (with variables, pipes, etc.), use spawn-sh-at-startup:
// spawn-sh-at-startup "qs -c ~/source/qs/MyAwesomeShell"

hotkey-overlay {
    // Uncomment this line to disable the "Important Hotkeys" pop-up at startup.
    skip-at-startup
}

// Uncomment this line to ask the clients to omit their client-side decorations if possible.
// If the client will specifically ask for CSD, the request will be honored.
// Additionally, clients will be informed that they are tiled, removing some client-side rounded corners.
// This option will also fix border/focus ring drawing behind some semitransparent windows.
// After enabling or disabling this, you need to restart the apps for this to take effect.
prefer-no-csd

// You can change the path where screenshots are saved.
// A ~ at the front will be expanded to the home directory.
// The path is formatted with strftime(3) to give you the screenshot date and time.
screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"

// You can also set this to null to disable saving screenshots to disk.
// screenshot-path null

// Animation settings.
// The wiki explains how to configure individual animations:
// https://yalter.github.io/niri/Configuration:-Animations
animations {
    // Uncomment to turn off all animations.
    // off

    // Slow down all animations by this factor. Values below 1 speed them up instead.
    slowdown 1.5
}

workspace "terminal"
workspace "browser"
workspace "editing"
workspace "develop"

workspace "chat" {
	open-on-output "HDMI-A-1"
}

workspace "stream" {
	open-on-output "HDMI-A-1"
}

// Window rules let you adjust behavior for individual windows.
// Find more information on the wiki:
// https://yalter.github.io/niri/Configuration:-Window-Rules

// Work around WezTerm's initial configure bug
// by setting an empty default-column-width.
window-rule {
    // This regular expression is intentionally made as specific as possible,
    // since this is the default config, and we want no false positives.
    // You can get away with just app-id="wezterm" if you want.
    match app-id=r#"^org\.wezfurlong\.wezterm$"#
    default-column-width {}
}

// Float harder!
window-rule {
    // This app-id regular expression will work for both:
    // - host Firefox (app-id is "firefox")
    // - Flatpak Firefox (app-id is "org.mozilla.firefox")
    match app-id=r#"firefox$"# title="^Picture-in-Picture$"
		match app-id="org.pulseaudio.pavucontrol"
		match app-id="org.kde.kcalc"
    open-floating true
}

// Limited size
window-rule {
		match app-id="org.pulseaudio.pavucontrol"
		match app-id="blueman-manager"

		default-column-width { fixed 720; }
		default-window-height { fixed 720; }
}

// Take-a-break!
window-rule {
		match app-id="take-a-break"
		open-on-output "HDMI-A-2"
		open-floating true

		border {
			off
		}
}

// Things on workspaces
window-rule {
		match title=r#"^Cinny"#
		match title=r#".*Discord.*"#

		default-column-width { proportion 0.8; }
		open-on-workspace "chat"
}

window-rule {
		match app-id="firebotv5"
		match app-id="com.obsproject.Studio"
		
		default-column-width { proportion 0.8; }
		open-on-workspace "stream"
}

window-rule {
		match title="GitHub Desktop"
		match app-id="codium"
		match app-id="jetbrains-idea-ce"

		open-on-workspace "develop"
}

window-rule {
		match app-id="codium"
		match app-id="jetbrains-idea-ce"

		open-maximized true
}

window-rule {
		match app-id="org.inkscape.Inkscape"
		match app-id="org.kde.kdenlive"

		open-maximized true
		open-on-workspace "editing"
}

window-rule {
		match app-id="floorp"
		match app-id="chromium"

		open-maximized true
		open-on-workspace "browser"
}

// Example: block out two password managers from screen capture.
// (This example rule is commented out with a "/-" in front.)
/-window-rule {
    match app-id=r#"^org\.keepassxc\.KeePassXC$"#
    match app-id=r#"^org\.gnome\.World\.Secrets$"#

    block-out-from "screen-capture"

    // Use this instead if you want them visible on third-party screenshot tools.
    // block-out-from "screencast"
}

// Example: enable rounded corners for all windows.
// (This example rule is commented out with a "/-" in front.)
window-rule {
    geometry-corner-radius 8
    clip-to-geometry true
}

binds {
    Mod+Shift+Slash { show-hotkey-overlay; }

    // App shortcuts
    Mod+Q hotkey-overlay-title="Open a Terminal: konsole" { spawn "konsole" "--profile" "Hyprland"; }
    Mod+R hotkey-overlay-title="Run an Application: walker" { spawn "walker"; }
		Mod+E hotkey-overlay-title="Check your inventory: dolphin" { spawn "dolphin"; }
    Super+Alt+L hotkey-overlay-title="Lock the Screen: hyprlock" { spawn "hyprlock"; }

		// Sound and screen
    XF86AudioRaiseVolume allow-when-locked=true { spawn-sh "wpctl set-volume @DEFAULT_AUDIO_SINK@ 0.1+"; }
    XF86AudioLowerVolume allow-when-locked=true { spawn-sh "wpctl set-volume @DEFAULT_AUDIO_SINK@ 0.1-"; }
    XF86AudioMute        allow-when-locked=true { spawn-sh "wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"; }
    XF86AudioMicMute     allow-when-locked=true { spawn-sh "wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle"; }

    XF86MonBrightnessUp allow-when-locked=true { spawn "brightnessctl" "--class=backlight" "set" "+10%"; }
    XF86MonBrightnessDown allow-when-locked=true { spawn "brightnessctl" "--class=backlight" "set" "10%-"; }

		// Other important key binds
    Mod+O repeat=false { toggle-overview; }
    Mod+C repeat=false { close-window; }

		// Window/Column Movement
    Mod+Left  { focus-column-left; }
    Mod+Right { focus-column-right; }
    Mod+Shift+Left  { move-column-left; }
    Mod+Shift+Right { move-column-right; }
    Mod+Ctrl+Left  { move-column-to-monitor "HDMI-A-1"; }
    Mod+Ctrl+Right  { move-column-to-monitor "HDMI-A-2"; }

    Mod+Home { focus-column-first; }
    Mod+End  { focus-column-last; }
    Mod+Shift+Home { move-column-to-first; }
    Mod+Shift+End  { move-column-to-last; }

		// Workspace Movement
    Mod+Down  { focus-workspace-down; }
    Mod+Up    { focus-workspace-up; }
    Mod+Shift+Down  { move-column-to-workspace-down; }
    Mod+Shift+Up    { move-column-to-workspace-up; }
    Mod+Ctrl+Down { move-workspace-down; }
    Mod+Ctrl+Up   { move-workspace-up; }

    Mod+Shift+WheelScrollDown      cooldown-ms=150 { focus-workspace-down; }
    Mod+Shift+WheelScrollUp        cooldown-ms=150 { focus-workspace-up; }
    Mod+WheelScrollDown      { focus-column-right; }
    Mod+WheelScrollUp       { focus-column-left; }

    Mod+1 { focus-workspace "terminal"; }
    Mod+2 { focus-workspace "browser"; }
    Mod+3 { focus-workspace "editing"; }
    Mod+4 { focus-workspace "develop"; }
    Mod+5 { focus-workspace 5; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace "chat"; }
    Mod+8 { focus-workspace "stream"; }
    Mod+9 { focus-workspace 9; }
    Mod+Shift+1 { move-window-to-workspace "terminal"; }
    Mod+Shift+2 { move-window-to-workspace "browser"; }
    Mod+Shift+3 { move-window-to-workspace "editing"; }
    Mod+Shift+4 { move-window-to-workspace "develop"; }
    Mod+Shift+5 { move-window-to-workspace 5; }
    Mod+Shift+6 { move-window-to-workspace 6; }
    Mod+Shift+7 { move-window-to-workspace "chat"; }
    Mod+Shift+8 { move-window-to-workspace "stream"; }
    Mod+Shift+9 { move-window-to-workspace 9; }

		// Window size manipulation
    Mod+BracketLeft  { consume-or-expel-window-left; }
    Mod+BracketRight { consume-or-expel-window-right; }

    Mod+Comma  { consume-window-into-column; }
    Mod+Period { expel-window-from-column; }

    Mod+T { switch-preset-column-width; }
    Mod+Shift+T { switch-preset-window-height; }
    Mod+Ctrl+T { reset-window-height; }
    Mod+Shift+F { maximize-column; }
    Mod+F { fullscreen-window; }
    Mod+Ctrl+F { expand-column-to-available-width; }

    Mod+S { center-column; }
    Mod+Ctrl+S { center-visible-columns; }

    Mod+Minus { set-column-width "-10%"; }
    Mod+Equal { set-column-width "+10%"; }
    Mod+Shift+Minus { set-window-height "-10%"; }
    Mod+Shift+Equal { set-window-height "+10%"; }

		// Layout manipulation
    Mod+V       { toggle-window-floating; }
    Mod+Shift+V { switch-focus-between-floating-and-tiling; }
    Mod+W { toggle-column-tabbed-display; }

    Print { screenshot; }
    Ctrl+Print { screenshot-screen write-to-disk=false; }
    Alt+Print { screenshot-window write-to-disk=false; }

    Mod+Escape allow-inhibiting=false { toggle-keyboard-shortcuts-inhibit; }

    // The quit action will show a confirmation dialog to avoid accidental exits.
    Mod+M { quit; }
    Ctrl+Alt+Delete { quit; }

    // Powers off the monitors. To turn them back on, do any input like
    // moving the mouse or pressing any other key.
    Mod+Shift+P { power-off-monitors; }

    Alt+Tab { focus-column-right-or-first; }
}
